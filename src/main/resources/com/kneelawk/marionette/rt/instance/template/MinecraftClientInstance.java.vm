#* @vtlvariable name="data" type="com.kneelawk.marionette.rt.instance.template.MinecraftClientInstanceTData" *#
#* @vtlvariable name="utils" type="com.kneelawk.marionette.rt.template.TemplateUtils" *#
package ${data.packageName};

import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.SettableFuture;
import com.kneelawk.marionette.rt.instance.AbstractMinecraftInstance;
import com.kneelawk.marionette.rt.instance.LogWatcherThread;
import com.kneelawk.marionette.rt.rmi.CurrentThread;
import com.kneelawk.marionette.rt.rmi.RMIUtils;

import java.rmi.RemoteException;

#foreach($im in ${data.importNames})
import $im;
#end

public class ${data.className} extends AbstractMinecraftInstance {
    private final ${data.rmiClass} rmiAccess;

    public ${data.className}(Process process, LogWatcherThread outWatcher,
                                   LogWatcherThread errWatcher, ${data.rmiClass} rmiAccess) {
        super(process, outWatcher, errWatcher);
        this.rmiAccess = rmiAccess;
    }

    @Override
    public void startMinecraft() throws RemoteException {
        rmiAccess.start();
    }
#foreach($signal in $data.signalNames)
#set($funcName = $utils.lowerCamelCase.to($utils.upperCamelCase, $signal))

    public ListenableFuture<Void> create${funcName}Future() throws RemoteException {
        SettableFuture<Void> future = SettableFuture.create();
        rmiAccess.add${funcName}Signal(RMIUtils.export(() -> future.set(null)));
        chainFutureError(future);
        return future;
    }
#end
#foreach($queue in $data.queueCallbacks)
#set($funcName = $utils.lowerCamelCase.to($utils.upperCamelCase, $queue.callbackName))

    public ListenableFuture<$queue.callbackReturnType> add${funcName}Callback($queue.callbackClass callback) throws RemoteException {
        SettableFuture<$queue.callbackReturnType> future = SettableFuture.create();
        rmiAccess.add${funcName}Callback(RMIUtils.export((thread$utils.parameters($queue.parameterCount, true)) -> {
            try {
#if($queue.callbackReturnType == "Void")
                callback.callback(thread$utils.parameters($queue.parameterCount, true));
                future.set(null);
#else
                future.set(callback.callback(thread$utils.parameters($queue.parameterCount, true)));
#end
            } catch (Exception e) {
                future.setException(e);
            }
        }));
        chainFutureError(future);
        return future;
    }
#end
#foreach($constructor in $data.constructors)

    public $constructor.constructorClass new${constructor.constructorName}(CurrentThread thread$utils.joinParameters($constructor.parameters, true))#if(!$constructor.exceptions.isEmpty()) throws $utils.join($constructor.exceptions, ", ")#end {
        return rmiAccess.new${constructor.constructorName}(thread$utils.parameters($constructor.parameters.size(), true));
    }
#end
}
